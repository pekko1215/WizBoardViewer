<rankers>
    <loading class="{state.boards ? 'hidden' : ''} ">
    </loading>
    <div class="cup-title ">{props.cup.title}</div>
    <hr>
    <div class="search-box ">
        <div class="inline-input ">
            <i class="fas fa-search "></i>
            <div class="input " onkeyup={searchChange} contenteditable></div>
        </div>
    </div>
    <hr>
    <div if={state.boards} class="toggle-switch ">
        <div onclick={toggleDay} each={(board,day) in state.boards} class="toggle-button {state.currentBoard===board ? 'active' : ''} {!board ? 'disabled' : ''}" data-idx={day}>{day+1}日目</div>
    </div>
    <div if={state.boards} class="toggle-switch ">
        <div onclick={toggleTeam} class="toggle-button {state.currentBoard.currentTeam===team ? 'active' : ''} {!team ? 'disabled' : ''}" each={(team,idx) in state.currentBoard.teams} data-idx="{idx} ">
            {team.name.replace(/チーム/,'')}
        </div>
    </div>
    <br>
    <div if={state.boards} class="board-datas ">
        <ranker data={ranker} each={ranker in state.currentBoard.currentTeam.ranks.slice(0,50)} FavoriteList={props.FavoriteList}>

        </ranker>
    </div>
    <style scoped>
         :host {
            display: block;
            min-height: 100vh;
            position: relative;
        }
        
        .cup-title {
            font-family: sans-serif;
            font-size: 25pt;
        }
        
        hr {
            background-color: gray;
        }
        
        .search-box {
            width: 100%;
            padding-left: auto;
            padding-right: auto;
            padding-top: 25px;
            padding-bottom: 25px;
            font-size: 20pt;
            box-sizing: border-box;
        }
        
        .search-box>.inline-input {
            background-color: #ccc;
            box-sizing: border-box;
            border-radius: 15px;
            display: table;
            width: 100%;
            padding: 5px;
            max-width: 500px;
        }
        
        .search-box>.inline-input>i {
            display: table-cell;
            width: 46px;
            font-size: 28pt;
            vertical-align: middle;
            color: #eee;
            padding-left: 15px;
        }
        
        .search-box>.inline-input>.input {
            display: table-cell;
            width: auto;
        }
        
        .toggle-switch {
            max-width: 600px;
            width: 100%;
            border: solid 1px #ccc;
            border-radius: 5px;
            overflow: hidden;
            box-sizing: border-box;
            display: table;
        }
        
        .toggle-button {
            background-color: white;
            display: inline-block;
            width: auto;
            box-sizing: border-box;
            display: table-cell;
            text-align: center;
            vertical-align: middle;
            border-right: solid 1px #ccc;
            cursor: pointer;
            height: 50px;
        }
        /*         
        .toggle-button:last-child {
            border-right: solid 0px;
            width: auto;
        } */
        
        .toggle-button:hover {
            background-color: #eeeeee;
        }
        
        .toggle-button.active {
            background-color: #eee;
            font-weight: bold;
        }
        
        .line-spin-fade-loader {
            width: 0;
            height: 0;
            position: absolute;
            left: 0;
            right: 0;
            top: 0;
            bottom: 0;
            margin: auto auto;
            transform: scale(2);
        }
        
        .line-spin-fade-loader>div {
            background: black;
        }
        
        .board-datas {
            column-count: 1;
            text-align: center;
        }
        
        .disabled {
            background-color: #ccc !important;
            color: #bbb !important;
            cursor: default;
        }
        
        @media screen and (min-width:1024px) and (max-width:1300px) {
            .board-datas {
                column-count: 2;
            }
        }
        
        @media screen and (min-width:1300px) and (max-width:1500px) {
            .board-datas {
                column-count: 3;
            }
        }
        
        @media screen and (min-width:1500px) and (max-width:1920px) {
            .board-datas {
                column-count: 4;
            }
        }
        
        @media screen and (min-width:1920px) {
            .board-datas {
                column-count: 5;
            }
        }
    </style>
    <script>
        import Ranker from './ranker.riot';
        import Loading from './loading.riot';

        export default {
            components: {
                Loading,
                Ranker
            },
            async onBeforeUpdate(props, state) {
                let {
                    cup
                } = props;
                if (state.cup !== cup) {
                    state.cup = cup;
                    state.boards = null;
                    state.boards = (await cup.getBoardInfomationAllDaylast()).data;
                    this.update();
                }
                let dayIndex = props.dayindex;
                if (!state.boards[dayIndex]) dayIndex = state.boards.length - 1;
                state.currentBoard = state.boards[dayIndex];
                state.boards.forEach(board => {
                    if (!board) return
                    board.currentTeam = board.teams[0];
                })

                let teamIndex = props.teamindex
                if (!state.currentBoard.teams[teamIndex]) teamIndex = 0;
                state.currentBoard.currentTeam = state.currentBoard.teams[teamIndex];

                location.hash = `#cup/${props.cupindex}/${dayIndex}/${teamIndex}`;
                this.updateSearchQuery(this.searchText);
                // update が呼び出され、コンポーネントのテンプレートが更新された直後
            },
            async onMounted(props, state) {
                this.update();
            },
            toggleTeam(e) {
                let {
                    props,
                    state
                } = this;
                let {
                    target
                } = e;
                if (target.classList.contains('active')) return;
                let teamIndex = Number(target.dataset.idx);
                let dayIndex = state.boards.indexOf(state.currentBoard);
                if (!state.currentBoard) return;

                state.currentBoard.currentTeam = state.currentBoard.teams[teamIndex];
                location.hash = `#cup/${props.cupindex}/${dayIndex}/${teamIndex}`;

                this.updateSearchQuery(this.searchText);

            },
            toggleDay(e) {
                let {
                    props,
                    state
                } = this;
                let {
                    target
                } = e;
                if (target.classList.contains('active')) return;
                if (!state.currentBoard) return;

                let teamIndex = state.currentBoard.teams.indexOf(state.currentBoard.currentTeam);
                let dayIndex = Number(target.dataset.idx);
                if (!state.boards[dayIndex]) return;
                state.currentBoard = state.boards[dayIndex];
                state.currentBoard.currentTeam = state.currentBoard.teams[teamIndex];

                location.hash = `#cup/${props.cupindex}/${dayIndex}/${teamIndex}`;
                this.updateSearchQuery(this.searchText);
            },
            searchChange(e) {
                let element = e.target;
                let query = element.innerText;

                if (this.searchText === query) return;
                this.updateSearchQuery(query);
                this.update();
            },
            updateSearchQuery(str = '') {
                this.searchText = str;
                if (str === '') {
                    this.state.searchMode = false;
                } else {
                    this.state.searchMode = true;
                }
                this.state.currentBoard.currentTeam.ranks.forEach(t => {
                    return t.isHidden = this.state.searchMode && !t.name.includes(str);
                })

            }
        }
    </script>
</rankers>