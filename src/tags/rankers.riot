<rankers>
    <div class="loadding {state.board ? 'hidden' : ''}">
        <div class="line-spin-fade-loader">
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
        </div>
    </div>
    <div class="cup-title">{props.cup.title}</div>
    <hr>
    <div class="search-box">
        <div class="inline-input">
            <i class="fas fa-search"></i>
            <div class="input" onkeyup={searchChange} contenteditable></div>
        </div>
    </div>
    <hr>
    <div if={state.board} class="toggle-switch">
        <div onclick={toggleTeam} class="toggle-button {team.isActive ? 'active' : ''}" each={team in state.board.teams}
            teamid="{team.id}">
            {team.name.replace(/チーム/,'')}
        </div>
    </div>
    <br>
    <div if={state.board} class="board-datas">
        <ranker data={ranker} each={ranker in state.board.currentTeam.ranks.slice(0,50)} FavoriteList={props.FavoriteList}>

        </ranker>
    </div>
    <style scoped>
        .cup-title {
            font-family: sans-serif;
            font-size: 25pt;
        }

        hr {
            background-color: gray;
        }

        .search-box {
            width: 100%;
            padding-left: auto;
            padding-right: auto;
            padding-top: 25px;
            padding-bottom: 25px;
            font-size: 20pt;
            box-sizing: border-box;
        }

        .search-box>.inline-input {
            background-color: #ccc;
            box-sizing: border-box;
            border-radius: 15px;
            display: table;
            width: 100%;
            padding: 5px;
            max-width: 500px;
        }

        .search-box>.inline-input>i {
            display: table-cell;
            width: 46px;
            font-size: 28pt;
            vertical-align: middle;
            color: #eee;
            padding-left: 15px;
        }

        .search-box>.inline-input>.input {
            display: table-cell;
            width: auto;
        }

        .toggle-switch {
            max-width: 600px;
            width: 100%;
            border: solid 1px #ccc;
            border-radius: 5px;
            overflow: hidden;
            box-sizing: border-box;
            display: table;
        }

        .toggle-button {
            background-color: white;
            display: inline-block;
            width: 20%;
            box-sizing: border-box;
            display: table-cell;
            text-align: center;
            vertical-align: middle;
            border-right: solid 1px #ccc;
            cursor: pointer;
            height: 50px;
        }

        .toggle-button:last-child {
            border-right: solid 0px;
            width: auto;
        }

        .toggle-button:hover {
            background-color: #eeeeee;
        }

        .toggle-button.active {
            background-color: #eee;
            font-weight: bold;
        }

        .loadding {
            width: 100%;
            height: 100%;
            position: absolute;
            background: white;
            left: 0;
            top: 0;
            opacity: 1;
            transition: opacity 0s;
            pointer-events: auto;
        }

        .loadding.hidden {
            opacity: 0;
            transition: opacity 0.3s;
            pointer-events: none;
        }

        .line-spin-fade-loader {
            width: 0;
            height: 0;
            position: absolute;
            left: 0;
            right: 0;
            top: 0;
            bottom: 0;
            margin: auto auto;
            transform: scale(2);
        }

        .line-spin-fade-loader>div {
            background: black;
        }

        .board-datas {
            column-count: 1;
            text-align: center;
        }

        @media screen and (min-width:1024px) and (max-width:1300px) {

            /*　画面サイズが1024pxからはここを読み込む　*/
            .board-datas {
                column-count: 2;
            }
        }

        @media screen and (min-width:1300px) and (max-width:1500px) {

            /*　画面サイズが1024pxからはここを読み込む　*/
            .board-datas {
                column-count: 3;
            }
        }

        @media screen and (min-width:1500px) and (max-width:1920px) {

            /*　画面サイズが1024pxからはここを読み込む　*/
            .board-datas {
                column-count: 4;
            }
        }

        @media screen and (min-width:1920px) {

            /*　画面サイズが1024pxからはここを読み込む　*/
            .board-datas {
                column-count: 5;
            }
        }
    </style>
    <script>
        import Ranker from './ranker.riot';
        export default {
            components: {
                Ranker
            },
            async onMounted(props, state) {
                this.update();
            },
            async onBeforeUpdate(props, state) {
                let {
                    cup
                } = props;
                if (state.cup === cup) return;
                state.cup = cup;
                state.board = null;
                state.board = await cup.getBoardInfomationLast();
                state.board.teams[0].isActive = true;
                state.board.currentTeam = state.board.teams[0];
                this.updateSearchQuery(this.searchText);
                this.update();
            },
            toggleTeam(e) {
                let { props, state } = this;
                let { target } = e;
                if (target.classList.contains('active')) return;
                let teamid = target.attributes.teamid.value;
                state.board.currentTeam.isActive = false;

                state.board.currentTeam = state.board.teams.find(t => t.id == Number(teamid));
                state.board.currentTeam.isActive = true;

                this.updateSearchQuery(this.searchText);
                this.update();
            },
            searchChange(e) {
                let element = e.target;
                let query = element.innerText;
                
                if(this.searchText === query) return ;
                this.updateSearchQuery(query);
                this.update();
            },
            updateSearchQuery(str = ''){
                this.searchText = str;
                if(str === ''){
                    this.state.searchMode = false;
                }else{
                    this.state.searchMode = true;
                }
                console.log(this)
                this.state.board.currentTeam.ranks.forEach(t=>{
                    return t.isHidden = this.state.searchMode && !t.name.includes(str);
                })

            }
        }
    </script>
</rankers>