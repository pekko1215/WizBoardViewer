<ranker class={props.data.isHidden ? 'hidden' : ''}>
    <div class="icon-wrapper {props.data.isFavorited ? 'favorited' : ''}" onclick={clickFavorite}>
        <img class="icon" src="{`https://i-quiz-colopl-jp.akamaized.net/img/card/small/${props.data.leaderCardImg}.png`}">
        <div class="favorite">â˜…</div>
    </div>
    <div class="rank">{props.data.rankOrder}</div>
    <div class="name">{props.data.name}</div>
    <div class="point">{props.data.pvnEventPoint}Pt</div>
    <style scoped>
         :host {
            position: relative;
            width: 256px;
            height: 64px;
            border: solid 1px #aaaaaa;
            border-radius: 0px 5px 5px 0px;
            display: inline-block;
            margin: 5px;
            margin-left: 32px;
            box-sizing: border-box;
            background-color: white;
        }
        
         :host.hidden {
            /* 7Pay */
            display: none;
        }
        
        .icon-wrapper {
            width: 64px;
            height: 64px;
            position: absolute;
            left: -32px;
            cursor: pointer;
        }
        
        .icon-wrapper.favorited {
            color: gold !important;
            -webkit-text-stroke: 1px gray;
            text-stroke: 1px gray;
        }
        
        .icon {
            width: 64px;
            border-radius: 50%;
            border-radius: 5px 0px 0px 5px;
            position: absolute;
            top: -1px;
            border: solid 1px #aaaaaa;
            box-sizing: border-box;
            left: 0;
        }
        
        .rank {
            position: absolute;
            left: 36px;
            height: 100%;
            width: 38px;
            font-size: 27pt;
            line-height: 62px;
            font-family: 'Century Gothic';
            text-shadow: 1px 1px 3px #525252;
            text-align: center;
        }
        
        .name {
            position: absolute;
            left: 74px;
            width: 188px;
            top: 3px;
            text-align: center;
        }
        
        .point {
            position: absolute;
            left: 74px;
            width: 188px;
            top: 30px;
            text-align: center;
        }
        
        .favorite {
            width: 21px;
            height: 21px;
            border-radius: 0 0 0 6px;
            border: solid 1px #525252;
            box-sizing: border-box;
            position: absolute;
            top: 0;
            right: 0;
            background-color: #ddd;
            line-height: 21px;
            text-align: center;
            font-size: 18px;
        }
        
        .icon-wrapper {
            color: #ccc;
        }
        
        .icon-wrapper:hover {
            color: goldenrod;
        }
        
        .icon-wrapper.favorited .favorite {
            animation: star 0.1s;
            background-color: white;
        }
        
        @keyframes star {
            0% {
                font-size: 18px;
            }
            50% {
                font-size: 12px;
            }
            100% {
                font-size: 18px;
            }
        }
    </style>
    <script>
        function updateFavorite(props, state) {
            let rank = props.data;
            let idx = this.props.FavoriteList.findIndex(d => {
                return d.userId === rank.userId && d.team.board.cup === rank.team.board.cup;
            });
            if (idx !== -1) {
                rank.isFavorited = true;
            } else {
                rank.isFavorited = false;
            }
        }
        export default {
            onMounted(props, state) {

            },
            onBeforeUpdate: updateFavorite,
            onBeforeMount: updateFavorite,
            clickFavorite() {
                let rank = this.props.data;
                let idx = this.props.FavoriteList.findIndex(d => {
                    return d.userId === rank.userId && d.team.board.cup === rank.team.board.cup;
                });

                if (idx !== -1) {
                    this.props.FavoriteList.splice(idx, 1);
                } else {
                    this.props.FavoriteList.push(rank);
                }
                this.update();
            }
        }
    </script>
</ranker>